/*
 * Token.h
 *
 *  Created on: Jun 29, 2015
 *      Author: mocklera
 */

#ifndef TOKEN_H_
#define TOKEN_H_

#include <string>

class Token {
public:
	Token();
	virtual ~Token();
private:
	enum Type{COMMA, PERIOD, Q_MARK, LEFT_PAREN, RIGHT_PAREN, COLON, COLON_DASH, SCHEMES, FACTS, RULES, QUERIES, ID, STRING, END};
	 	 // map<TType, string> m = { { ID, "ID" }. { STRING, "STRING" } }
	     // So then you can do out << m[type] and it will spit out the string instead of the number in the enum
	std::string value;
	int line;
};

#endif /* TOKEN_H_ */




/* TODO: help session
 * 	Two Classes:
 * 		Token
 * 			Has type, line number, and value (and a map to convert from enumerated back to name of type)
 * 		Scanner
 * 			Take in text file and output all tokens
 * 			Store the tokens in some kind of "list" that won't change their order (vector, queue, etc)
 */
