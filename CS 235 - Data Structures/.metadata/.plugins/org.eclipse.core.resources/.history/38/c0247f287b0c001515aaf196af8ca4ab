#include "BST.h"

BST::BST() {
	root = NULL;
}

BST::~BST() {
	clear();
}

Node* BST::getRootNode() {
	cout << "Get root node" << endl;
	return root;
}

bool BST::add(int data) {
	cout << "ADDING" << endl << endl;
	bool added;

	if ( root == NULL ) {
		cout << "BST is empty. Adding value " << data << " at the root." << endl;
		root = new Node(data);
		added = true;
		cout << "Added." << endl;
	}
	else if ( !find(data, root) ) {
		cout << "Didn't find " << data << ". Adding it to tree" << endl;
		add_recursive(data, root);
		added = true;
	}
	else {
		cout << "Not adding duplicate value " << data << "." << endl;
		// Don't add a duplicate
		added = false;
	}

	return added;
}

bool BST::remove(int data) {
	cout << "Remove" << endl;
	return false;
}

void BST::clear() {
	cout << "Clear" << endl;
}

bool BST::add_recursive(int data, Node*& current) {
	cout << "Add recursive" << endl;
	if (current == NULL) {
		current = new Node(data);
		return true;
	}
	else {
		if (data > current->data) {
			return add_recursive(data, current->right_child);
		}
		else {
			return add_recursive(data, current->left_child);
		}
	}
}

bool BST::find(int value, Node* n) {
	cout << "Finding" << endl;
	bool found;

	if (n == NULL) {
		found = false;
	}
	else if ( n->data == value ) {
		found = true;
	}
	else {
		if (value > n->data) {
			found = find(value, n->right_child);
		}
		else {
			found = find(value, n->left_child);
		}
	}

	return found;
}









