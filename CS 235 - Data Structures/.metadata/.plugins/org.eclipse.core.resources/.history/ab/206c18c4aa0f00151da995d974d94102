/*
 * GPA.h
 *
 *  Created on: Jun 10, 2015
 *      Author: mocklera
 */

#ifndef STUDENT_CODE_GPA_H_
#define STUDENT_CODE_GPA_H_

#include "GPAInterface.h"
#include "Student.h"

/*
 * TODO: [[help session]]
 *
 ** DATA STRUCTURES------------------------------------------------
 * 		map<unsigned long long int,StudentInterface*>
 * 			set of pairs (pair<key,value>)
 * 			for this, it will be <ID, StudentInterface*>
 * 		set<StudentInterface*,Comparator>
 * 			^^^^^value^^^^^^ ,^^^order^^^
 * 		struct Comparator (just sorts alphabetically by name)
 ** ---------------------------------------------------------------
 *
 ** FOR EACH LOOPS-------------------------------------------------
 * 	 	[[ Sets ]]
 * 		for(StudentInterface* student : mySet) {
 * 			if( si->getID() == cool_id )
 * 				return true;
 * 		}
 *
 * 		OR
 *
 * 		[[ maps ]]
 * 		for (pair<unsigned long long int; SI*> p : myMap) {
 * 			if(p.second->getID() == cool_id)
 * 				return true
 * 		}
 ** ---------------------------------------------------------------
 *
 ** IMPORT STUDENTS------------------------------------------------
 *		You will have a set and a map in your GPA.h
 *		Students have name, address, phone, ID, GPA (better to do total_GPA and total_classes)
 *
 *		File format:
 *			ID #
 *			Name
 *			Address
 *			Phone #
 *		GPA and total classes should always start at 0
 *
 *
 */

class GPA: public GPAInterface {
public:
	GPA();
	virtual ~GPA();

	virtual map<unsigned long long int,StudentInterface*> getMap();
	virtual set<Student*,Comparator> getSet();
	virtual bool importStudents(string mapFileName, string setFileName);
	virtual bool importGrades(string fileName);
	virtual string querySet(string fileName);
	virtual string queryMap(string fileName);
	virtual void clear();
};

#endif /* STUDENT_CODE_GPA_H_ */
