
import javax.swing.JLabel;
import java.util.*;

/*
 * Author: Andy Mockler
 * Date: April 13, 2015
 * Description: IS303 Project 3. GUI application that simulates a basketball
                season. Creates objects for each team in the list box, and then
                plays 2 conference games and 1 non-conference game for each
                team. Option to add a home team advantage.
 */

/**
 *
 * @author Andy
 */
public class frmMain extends javax.swing.JFrame {
    
    
    /**
     * Creates new form frmMain
     */
    public frmMain() {
        initComponents();
        
        // Create arrays of labels for ease of use
        nameLabels = new javax.swing.JLabel[]{lblTeam1Name, lblTeam2Name, lblTeam3Name, lblTeam4Name, lblTeam5Name, lblTeam6Name, lblTeam7Name, lblTeam8Name, lblTeam9Name, lblTeam10Name};
        winsLabels = new javax.swing.JLabel[]{lblTeam1Wins, lblTeam2Wins, lblTeam3Wins, lblTeam4Wins, lblTeam5Wins, lblTeam6Wins, lblTeam7Wins, lblTeam8Wins, lblTeam9Wins, lblTeam10Wins};
        lossesLabels = new javax.swing.JLabel[]{lblTeam1Losses, lblTeam2Losses, lblTeam3Losses, lblTeam4Losses, lblTeam5Losses, lblTeam6Losses, lblTeam7Losses, lblTeam8Losses, lblTeam9Losses, lblTeam10Losses};
        statusLabels = new javax.swing.JLabel[]{lblTeam1Status, lblTeam2Status, lblTeam3Status, lblTeam4Status, lblTeam5Status, lblTeam6Status, lblTeam7Status, lblTeam8Status, lblTeam9Status, lblTeam10Status};
        
        // Create new arraylist of teams. Has to be initialized here in order
        // for the buildTeamsArrayList function to work. 
        teams = new ArrayList<>();
        
        // Builds out the teams list with "fresh" objects for each team in the
        // list box.
        buildTeamsArrayList();
    }
    
    // BUILDTEAMSARRAYLIST()
    // Method that builds a "fresh" arraylist of teams in the listbox. Useful
    // for refreshing stats each time the "play" button is clicked.
    //
    // If there is ever need to persist objects instead of clearing and
    // creating new ones, the stats can just be refreshed instead of clearing
    // everything out.
    private void buildTeamsArrayList() {
        // Clear out old data
        teams.clear();
        
        // Insert an object for each team in the listbox
        int numTeams = listConferenceTeams.getModel().getSize();
        for (int i = 0; i < numTeams; i++) {
            listConferenceTeams.setSelectedIndex(i);
            String name = listConferenceTeams.getSelectedValue().toString();
            teams.add(new BasketballTeam(name));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlConferenceTeams = new javax.swing.JPanel();
        lblConferenceTeams = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listConferenceTeams = new javax.swing.JList();
        pnlNonConferenceTeams = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listNonConferenceTeams = new javax.swing.JList();
        pnlRecord = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblTeam1Name = new javax.swing.JLabel();
        lblTeam2Name = new javax.swing.JLabel();
        lblTeam3Name = new javax.swing.JLabel();
        lblTeam4Name = new javax.swing.JLabel();
        lblTeam5Name = new javax.swing.JLabel();
        lblTeam6Name = new javax.swing.JLabel();
        lblTeam7Name = new javax.swing.JLabel();
        lblTeam8Name = new javax.swing.JLabel();
        lblTeam9Name = new javax.swing.JLabel();
        lblTeam10Name = new javax.swing.JLabel();
        lblWins = new javax.swing.JLabel();
        lblLosses = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblTeam1Wins = new javax.swing.JLabel();
        lblTeam2Wins = new javax.swing.JLabel();
        lblTeam3Wins = new javax.swing.JLabel();
        lblTeam4Wins = new javax.swing.JLabel();
        lblTeam5Wins = new javax.swing.JLabel();
        lblTeam6Wins = new javax.swing.JLabel();
        lblTeam7Wins = new javax.swing.JLabel();
        lblTeam8Wins = new javax.swing.JLabel();
        lblTeam9Wins = new javax.swing.JLabel();
        lblTeam10Wins = new javax.swing.JLabel();
        lblTeam1Losses = new javax.swing.JLabel();
        lblTeam2Losses = new javax.swing.JLabel();
        lblTeam3Losses = new javax.swing.JLabel();
        lblTeam4Losses = new javax.swing.JLabel();
        lblTeam5Losses = new javax.swing.JLabel();
        lblTeam6Losses = new javax.swing.JLabel();
        lblTeam7Losses = new javax.swing.JLabel();
        lblTeam8Losses = new javax.swing.JLabel();
        lblTeam9Losses = new javax.swing.JLabel();
        lblTeam10Losses = new javax.swing.JLabel();
        lblTeam1Status = new javax.swing.JLabel();
        lblTeam2Status = new javax.swing.JLabel();
        lblTeam3Status = new javax.swing.JLabel();
        lblTeam4Status = new javax.swing.JLabel();
        lblTeam5Status = new javax.swing.JLabel();
        lblTeam6Status = new javax.swing.JLabel();
        lblTeam7Status = new javax.swing.JLabel();
        lblTeam8Status = new javax.swing.JLabel();
        lblTeam9Status = new javax.swing.JLabel();
        lblTeam10Status = new javax.swing.JLabel();
        homeTeamAdvantage = new javax.swing.JCheckBox();
        btnPlay = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlConferenceTeams.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlConferenceTeams.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblConferenceTeams.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lblConferenceTeams.setText("Conference Teams");
        pnlConferenceTeams.add(lblConferenceTeams, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        listConferenceTeams.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "BYU", "Gonzaga", "Loyola", "St. Marys", "Pepperdine", "San Francisco", "San Diego", "Portland", "Pacific", "Santa Clara" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listConferenceTeams);

        pnlConferenceTeams.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 150, 200));

        getContentPane().add(pnlConferenceTeams, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 170, 240));

        pnlNonConferenceTeams.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlNonConferenceTeams.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel1.setText("Non-Conference Teams");
        pnlNonConferenceTeams.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        listNonConferenceTeams.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Arizona", "Florida", "Memphis", "Stanford", "Dayton", "Texas" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listNonConferenceTeams);

        pnlNonConferenceTeams.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 150, 150));

        getContentPane().add(pnlNonConferenceTeams, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 170, 190));

        pnlRecord.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlRecord.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel2.setText("Record");
        pnlRecord.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        pnlRecord.add(lblTeam1Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));
        pnlRecord.add(lblTeam2Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));
        pnlRecord.add(lblTeam3Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));
        pnlRecord.add(lblTeam4Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));
        pnlRecord.add(lblTeam5Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));
        pnlRecord.add(lblTeam6Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));
        pnlRecord.add(lblTeam7Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));
        pnlRecord.add(lblTeam8Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, -1));
        pnlRecord.add(lblTeam9Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));
        pnlRecord.add(lblTeam10Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, -1, -1));

        lblWins.setFont(new java.awt.Font("Lucida Grande", 3, 12)); // NOI18N
        lblWins.setText("Wins");
        pnlRecord.add(lblWins, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, -1, -1));

        lblLosses.setFont(new java.awt.Font("Lucida Grande", 3, 12)); // NOI18N
        lblLosses.setText("Losses");
        pnlRecord.add(lblLosses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, -1, -1));

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 3, 12)); // NOI18N
        jLabel3.setText("Status");
        pnlRecord.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, -1, -1));
        pnlRecord.add(lblTeam1Wins, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, -1, -1));
        pnlRecord.add(lblTeam2Wins, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, -1, -1));
        pnlRecord.add(lblTeam3Wins, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, -1, -1));
        pnlRecord.add(lblTeam4Wins, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, -1, -1));
        pnlRecord.add(lblTeam5Wins, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, -1, -1));
        pnlRecord.add(lblTeam6Wins, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, -1, -1));
        pnlRecord.add(lblTeam7Wins, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, -1, -1));
        pnlRecord.add(lblTeam8Wins, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 200, -1, -1));
        pnlRecord.add(lblTeam9Wins, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, -1, -1));
        pnlRecord.add(lblTeam10Wins, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 240, -1, -1));
        pnlRecord.add(lblTeam1Losses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, -1, -1));
        pnlRecord.add(lblTeam2Losses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, -1, -1));
        pnlRecord.add(lblTeam3Losses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, -1, -1));
        pnlRecord.add(lblTeam4Losses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, -1, -1));
        pnlRecord.add(lblTeam5Losses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 140, -1, -1));
        pnlRecord.add(lblTeam6Losses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, -1, -1));
        pnlRecord.add(lblTeam7Losses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 180, -1, -1));
        pnlRecord.add(lblTeam8Losses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 200, -1, -1));
        pnlRecord.add(lblTeam9Losses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 220, -1, -1));
        pnlRecord.add(lblTeam10Losses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 240, -1, -1));
        pnlRecord.add(lblTeam1Status, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, -1, -1));
        pnlRecord.add(lblTeam2Status, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, -1, -1));
        pnlRecord.add(lblTeam3Status, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 100, -1, -1));
        pnlRecord.add(lblTeam4Status, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, -1, -1));
        pnlRecord.add(lblTeam5Status, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 140, -1, -1));
        pnlRecord.add(lblTeam6Status, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 160, -1, -1));
        pnlRecord.add(lblTeam7Status, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 180, -1, -1));
        pnlRecord.add(lblTeam8Status, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 200, -1, -1));
        pnlRecord.add(lblTeam9Status, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 220, -1, -1));
        pnlRecord.add(lblTeam10Status, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 240, -1, -1));

        getContentPane().add(pnlRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 480, 300));

        homeTeamAdvantage.setText("Home Team 5+");
        homeTeamAdvantage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeTeamAdvantageActionPerformed(evt);
            }
        });
        getContentPane().add(homeTeamAdvantage, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 350, -1, -1));

        btnPlay.setText("Play");
        btnPlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPlayMouseClicked(evt);
            }
        });
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });
        getContentPane().add(btnPlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 320, -1, -1));

        btnReset.setText("Reset");
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnResetMouseClicked(evt);
            }
        });
        getContentPane().add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 370, -1, -1));

        btnQuit.setText("Quit");
        btnQuit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnQuitMouseClicked(evt);
            }
        });
        getContentPane().add(btnQuit, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 370, -1, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 660, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, 660, 10));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, 10, 460));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homeTeamAdvantageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeTeamAdvantageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_homeTeamAdvantageActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnQuitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnQuitMouseClicked
        // Exit on "quit" button click
        System.exit(0);
    }//GEN-LAST:event_btnQuitMouseClicked

    private void btnPlayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPlayMouseClicked
        // Get a "Fresh set" of teams
        buildTeamsArrayList();
        
        // Get the number of conference teams and non-conference teams that will
        // be playing
        int numConfTeams = listConferenceTeams.getModel().getSize();
        int numNonConfTeams = listNonConferenceTeams.getModel().getSize();
        
        // Run through the season. Outer for loop steps through each of the
        // teams. Inner loop simulates games for each team.
        for (int index = 0; index < numConfTeams; index++) {
            // Grab the current team
            BasketballTeam currentTeam = teams.get(index);
            
            // Conference teams
            for (int i = index + 1; i < numConfTeams; i++) {
                // Get the opponent
                BasketballTeam otherTeam = teams.get(i);
                
                // Holds the generated scores
                int currentTeamScore;
                int otherTeamScore;
                
                // First game (home game)
                do {
                    // Generate score
                    currentTeamScore = random.nextInt(100);
                    otherTeamScore = random.nextInt(100);

                    // Home team advantage (if the box is checked)
                    if (homeTeamAdvantage.isSelected())
                        currentTeamScore+=5; 
                    
                } while (currentTeamScore == otherTeamScore);
                
                // Update stats based on the outcome of the game
                if (currentTeamScore > otherTeamScore) {
                    currentTeam.setWins(currentTeam.getWins() + 1);
                    otherTeam.setLosses(otherTeam.getLosses() + 1);
                } else {
                    otherTeam.setWins(otherTeam.getWins() + 1);
                    currentTeam.setLosses(currentTeam.getLosses() + 1);
                }
                
                // Second game (away game)
                do {
                    // Generate score
                    currentTeamScore = random.nextInt(100);
                    otherTeamScore = random.nextInt(100);

                    // Home team advantage
                    if (homeTeamAdvantage.isSelected())
                        otherTeamScore+=5; 
                    
                } while (currentTeamScore == otherTeamScore);
                
                // Update stats based on the outcome of the game
                if (currentTeamScore > otherTeamScore) {
                    currentTeam.setWins(currentTeam.getWins() + 1);
                    otherTeam.setLosses(otherTeam.getLosses() + 1);
                } else {
                    otherTeam.setWins(otherTeam.getWins() + 1);
                    currentTeam.setLosses(currentTeam.getLosses() + 1);
                }
                
            }
            
            // Non-conference teams
            for (int i = 0; i < numNonConfTeams; i++) {
                // Generate score
                int currentTeamScore = random.nextInt(100);
                int nonConfTeamScore = random.nextInt(100);
                
                // Update stats based on game results
                if (currentTeamScore > nonConfTeamScore)
                    currentTeam.setWins(currentTeam.getWins() + 1);
                else
                    currentTeam.setLosses(currentTeam.getLosses() + 1);
            }
        }
        
        // Display the results in the app window
        displayResults();
    }//GEN-LAST:event_btnPlayMouseClicked
    
    
    // DISPLAYRESULTS()
    // Sorts the data and displays it in the GUI window. Data is sorted by
    // number of wins.
    private void displayResults() {
        // Get the total number of teams that are being sorted
        int numTeams = teams.size();
        
        // Bubble sort.
        boolean unsorted = true;
        // As long as there has been a swap in the last pass, you need to pass
        // through and check again.
        while (unsorted) {
            // Stop the loop if nothing gets swapped
            unsorted = false;
            // Check for swapping
            for (int j = 0; j < numTeams - 1; j++) {
                int teamAWins = teams.get(j).getWins();
                int teamBWins = teams.get(j+1).getWins();
                if (teamAWins < teamBWins) {
                    // If not in order, switch the two elements and set the 
                    // flag to run through the check again.
                    BasketballTeam temp = teams.get(j);
                    teams.set(j, teams.get(j+1));
                    teams.set(j+1, temp);
                    unsorted = true;
                }
            }
        }
       
        
        // There are 10 spots in the results, so display the top 10 teams.
        for (int i = 0; i < 10; i++) {
            // Get each team and put their info into the labels
            BasketballTeam team = teams.get(i);
            nameLabels[i].setText(team.getName());
            winsLabels[i].setText(String.valueOf(team.getWins()));
            lossesLabels[i].setText(String.valueOf(team.getLosses()));
            statusLabels[i].setText(team.getStatus());
        }
    }
    
    private void btnResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseClicked
        // Reset all team names
        for (JLabel nameLabel : nameLabels) {
            nameLabel.setText("");
        }

        // Reset all the wins
        for (JLabel winsLabel : winsLabels) {
            winsLabel.setText("");
        }
        
        // Reset all the losses
        for (JLabel lossesLabel : lossesLabels) {
            lossesLabel.setText("");
        }
        
        // Reset all the statuses
        for (JLabel statusLabel : statusLabels) {
            statusLabel.setText("");
        }
    }//GEN-LAST:event_btnResetMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnReset;
    private javax.swing.JCheckBox homeTeamAdvantage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblConferenceTeams;
    private javax.swing.JLabel lblLosses;
    private javax.swing.JLabel lblTeam10Losses;
    private javax.swing.JLabel lblTeam10Name;
    private javax.swing.JLabel lblTeam10Status;
    private javax.swing.JLabel lblTeam10Wins;
    private javax.swing.JLabel lblTeam1Losses;
    private javax.swing.JLabel lblTeam1Name;
    private javax.swing.JLabel lblTeam1Status;
    private javax.swing.JLabel lblTeam1Wins;
    private javax.swing.JLabel lblTeam2Losses;
    private javax.swing.JLabel lblTeam2Name;
    private javax.swing.JLabel lblTeam2Status;
    private javax.swing.JLabel lblTeam2Wins;
    private javax.swing.JLabel lblTeam3Losses;
    private javax.swing.JLabel lblTeam3Name;
    private javax.swing.JLabel lblTeam3Status;
    private javax.swing.JLabel lblTeam3Wins;
    private javax.swing.JLabel lblTeam4Losses;
    private javax.swing.JLabel lblTeam4Name;
    private javax.swing.JLabel lblTeam4Status;
    private javax.swing.JLabel lblTeam4Wins;
    private javax.swing.JLabel lblTeam5Losses;
    private javax.swing.JLabel lblTeam5Name;
    private javax.swing.JLabel lblTeam5Status;
    private javax.swing.JLabel lblTeam5Wins;
    private javax.swing.JLabel lblTeam6Losses;
    private javax.swing.JLabel lblTeam6Name;
    private javax.swing.JLabel lblTeam6Status;
    private javax.swing.JLabel lblTeam6Wins;
    private javax.swing.JLabel lblTeam7Losses;
    private javax.swing.JLabel lblTeam7Name;
    private javax.swing.JLabel lblTeam7Status;
    private javax.swing.JLabel lblTeam7Wins;
    private javax.swing.JLabel lblTeam8Losses;
    private javax.swing.JLabel lblTeam8Name;
    private javax.swing.JLabel lblTeam8Status;
    private javax.swing.JLabel lblTeam8Wins;
    private javax.swing.JLabel lblTeam9Losses;
    private javax.swing.JLabel lblTeam9Name;
    private javax.swing.JLabel lblTeam9Status;
    private javax.swing.JLabel lblTeam9Wins;
    private javax.swing.JLabel lblWins;
    private javax.swing.JList listConferenceTeams;
    private javax.swing.JList listNonConferenceTeams;
    private javax.swing.JPanel pnlConferenceTeams;
    private javax.swing.JPanel pnlNonConferenceTeams;
    private javax.swing.JPanel pnlRecord;
    // End of variables declaration//GEN-END:variables
    
    // Andy Mockler variable declarations
    private final ArrayList<BasketballTeam> teams;
    javax.swing.JLabel[] nameLabels;
    javax.swing.JLabel[] winsLabels;
    javax.swing.JLabel[] lossesLabels;
    javax.swing.JLabel[] statusLabels;
    Random random = new Random();
}
